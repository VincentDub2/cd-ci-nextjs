stages:
  - build
  - deploy

build-image:
  stage: build
  only:
    - staging
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_TLS_CERTDIR: ""
  script:
    # Connexion à Docker Hub
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    # Construire et tagger l'image
    - docker build -t $DOCKERHUB_USERNAME/my-app:$CI_COMMIT_REF_SLUG -f docker/development/Dockerfile .
    # Pousser l'image sur Docker Hub
    - docker push $DOCKERHUB_USERNAME/my-app:$CI_COMMIT_REF_SLUG

frontend-deploy:
  stage: deploy
  only:
    - staging
  #image: debian:latest
  script:
    # Installer ssh
    #- apt-get update && apt-get install -y openssh-client
    # Configurer SSH pour accéder à la VM
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null" > ~/.ssh/config
    - eval $(ssh-agent) && echo "$SSH_PRIVATE_KEY" | base64 -d | ssh-add -

    #- echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    #- chmod 600 ~/.ssh/id_rsa
    #- echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
    #- echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null" > ~/.ssh/config
    # Se connecter à la VM et exécuter les commandes Docker
    -
    - ssh -v $SSH_USERNAME@$SSH_HOST -p $SSH_PORT "echo 'Connection successful'"
    - ssh $SSH_USERNAME@$SSH_HOST -p $SSH_PORT "docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD"
    - ssh $SSH_USERNAME@$SSH_HOST -p $SSH_PORT "docker pull $DOCKERHUB_USERNAME/my-app:$CI_COMMIT_REF_SLUG"
    - ssh $SSH_USERNAME@$SSH_HOST -p $SSH_PORT "docker stop my-app || true && docker rm my-app || true"
    - ssh $SSH_USERNAME@$SSH_HOST -p $SSH_PORT "docker run -d --name my-app -p 80:3000 $DOCKERHUB_USERNAME/my-app:$CI_COMMIT_REF_SLUG"
